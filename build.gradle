	plugins {
    id 'fabric-loom' version '1.10.5'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group   = project.maven_group
version = project.mod_version

repositories {
    mavenCentral()
    maven { url 'https://maven.fabricmc.net/' }    // Fabric Loader, Loom
    maven { url 'https://maven.shedaniel.me/' }   // ClothConfig, AutoConfig (опционально)
    maven { url 'https://jitpack.io/' }           // для JitPack-артефактов
    maven { url 'https://maven.wispforest.io/releases/' } // Owo-lib / sentinel
}

dependencies {
    // Core Fabric
    minecraft        "com.mojang:minecraft:${project.minecraft_version}"
    mappings         "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // (Опционально) AutoConfig / ClothConfig
    // modImplementation "me.shedaniel.autoconfig:autoconfig-core:4.6.0"
    // modImplementation "me.shedaniel.autoconfig:autoconfig-gson:4.6.0"
    // modImplementation "me.shedaniel.cloth:cloth-config-fabric:11.0.147"

    // Личные библиотеки
    include implementation('com.github.jagrosh:DiscordIPC:a8d6631')
    implementation 'org.json:json:20231013'
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'com.kohlschutter.junixsocket:junixsocket-common:2.6.2'
    implementation 'com.kohlschutter.junixsocket:junixsocket-native-common:2.6.2'
    modAnnotationProcessor "io.wispforest:owo-lib:${project.owo_version}"
    modRuntimeOnly        "io.wispforest:owo-sentinel:${project.owo_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset = 'UTF-8'
    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(targetJavaVersion))
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    archiveClassifier.set('all')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories { /* по необходимости */ }
}
